@*
 * DiceCombats - Copyright (C) 2025 Yann Charbon
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 * This file is part of DiceCombats, released under the GNU GPL v3.
 * See the LICENSE file in the repository root for details.
*@

@page "/combatsexplorer"
@using System.Text.Json
@inject NavigationManager Navigation
@inject DiceCombatsService CombatService
@inject IFileHandler FileHandler
@inject PopupNotificationService PopupNotificationService
@inject IStringLocalizer<Resources.Localization.CombatsExplorer> Loc

<style>
    .CombatsCombatLink {
    color:white;
    background-color: #004547;
    border-radius:30px;
    box-shadow: 0 2px 10px rgba(255, 255, 255, 0.1);
    padding:10px;
    margin:5px;
    }
</style>

<div style="padding-top:10px; padding-bottom:20px; display:flex; flex-wrap:wrap; justify-content:flex-end; align-items:center;">
    <MudSwitch @bind-Value="_showEditionButtons" Label="@Loc["ShowEditonBtnsToggle"]" Color="Color.Primary" />
    <MudButton OnClick="@(() => Navigation.NavigateTo("/combatmanager/new"))"
        Variant="Variant.Filled"
        StartIcon="@Icons.Material.Filled.Add"
        Color="@Color.Primary"
        Size="Size.Large"
        Style="margin:2px;">
            @Loc["NewCombatBtn"]
    </MudButton>
    <MudButton OnClick="@(() => ExportAllCombats())"
        Variant="Variant.Filled"
        StartIcon="@Icons.Material.Filled.Upload"
        Color="@Color.Primary"
        Size="Size.Large"
        Style="margin:2px;"
        title="@Loc["ExportAllCombatsBtnTitle"]">
            @Loc["ExportAllCombatsBtn"]
    </MudButton>
    <MudButton OnClick="@(() => ImportCombats())"
        Variant="Variant.Filled"
        StartIcon="@Icons.Material.Filled.Download"
        Color="@Color.Primary"
        Size="Size.Large"
        Style="margin:2px;"
        title="@Loc["ImportCombatsBtnTitle"]">
            @Loc["ImportCombatsBtn"]
    </MudButton>
</div>

<div style="background-color:#0F0F0F;padding:20px;border-radius:10px;">
    @for (char chr = 'a'; chr <= 'z'; chr++)
    {
        @if (CombatService.GetCombatList().Find(x => x.Name.ToLower().StartsWith(chr)) != null)
        {
            <div style="border-bottom:solid; border-bottom-width:1px; border-bottom-color:grey;">
                <h4>@chr.ToString().ToUpper()</h4>
            </div>
            <div style="display:flex; flex-wrap:wrap;">
                @foreach (DCCombat combat in CombatService.GetCombatList().FindAll(x => x.Name.ToLower().StartsWith(chr)))
                {
                    <div style="display:flex; flex-wrap:nowrap; align-items:start; margin:5px; border-radius:5px; background-color:#303030;">
                        <div style="margin:5px; max-width:350px;">
                            <h4><a href="/combatmanager/@combat.Id.ToString()">@combat.Name</a></h4>
                        </div>
                        <div style="margin:5px;">
                            @if (CombatService.IsCombatFavorite(combat.Id.ToString()))
                            {
                                <MudIconButton OnClick="() => {CombatService.RemoveCombatToFavoriteByGUID(combat.Id.ToString()); StateHasChanged();}" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Star" Color="@Color.Warning" Size="Size.Large"></MudIconButton>
                            } else
                            {
                                <MudIconButton OnClick="() => {CombatService.AddCombatToFavoriteByGUID(combat.Id.ToString()); StateHasChanged();}" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Star" Color="@Color.Secondary" Size="Size.Large"></MudIconButton>
                            }
                        </div>
                        <div style="margin:5px;">
                            @if (_showEditionButtons)
                            {
                                <MudIconButton OnClick="() => Edit(combat)" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Edit" Color="@Color.Primary" Size="Size.Large" title="@Loc["CombatEditBtn"]"></MudIconButton>
                                <MudIconButton OnClick="() => ExportCombat(combat)" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Upload" Color="@Color.Primary" Size="Size.Large" title="@Loc["CombatExportBtn"]"></MudIconButton>
                                <MudIconButton OnClick="() => CombatService.DeleteCombat(combat)" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Delete" Color="@Color.Error" Size="Size.Large" title="@Loc["CombatDeleteBtn"]"></MudIconButton>
                            }
                        </div>
                    </div>
                }
            </div>
        }
    }

</div>

@code {
    private bool _showEditionButtons;

    private void Edit(DCCombat combat)
    {
        Navigation.NavigateTo($"/combatmanager/{combat.Id.ToString()}?EditionMode=true");
    }

    private async Task ExportCombat(DCCombat combat)
    {
        var options = new JsonSerializerOptions
            {
                WriteIndented = true,
                DefaultBufferSize = 15 * 1024 * 1024 // 15MiB
            };
        string json = JsonSerializer.Serialize(combat, options);

        var fileName = $"DC_combat_{combat.Name}.json";
        var data = System.Text.Encoding.UTF8.GetBytes(json);

        await FileHandler.SaveFileAsync(fileName, data);

        if (CombatService.IsCurrentCulture("fr"))
        {
            PopupNotificationService.Show("Exportation", $"Combat '{combat.Name}' exporté avec succès", PopupNotificationService.Type.SUCCESS, 3000);
        } else
        {
            PopupNotificationService.Show("Combat export", $"Successfully exported '{combat.Name}'", PopupNotificationService.Type.SUCCESS, 3000);
        }
    }

    private async Task ExportAllCombats()
    {
        var options = new JsonSerializerOptions
            {
                WriteIndented = true,
                DefaultBufferSize = 15 * 1024 * 1024 // 15MiB
            };
        string json = JsonSerializer.Serialize(CombatService.GetCombatList(), options);

        var fileName = $"DC_all_combats.json";
        var data = System.Text.Encoding.UTF8.GetBytes(json);

        await FileHandler.SaveFileAsync(fileName, data);

        if (CombatService.IsCurrentCulture("fr"))
        {
            PopupNotificationService.Show("Exportation", "Tous les combats exportés avec succès", PopupNotificationService.Type.SUCCESS, 3000);
        } else
        {
            PopupNotificationService.Show("Combat export", "Successfully exported all combats", PopupNotificationService.Type.SUCCESS, 3000);
        }
    }

    private async Task ImportCombats()
    {
        var fileData = await FileHandler.LoadFileAsync();
        if (fileData != null)
        {
            string json = System.Text.Encoding.UTF8.GetString(fileData);
            var options = new JsonSerializerOptions
                {
                    DefaultBufferSize = 15 * 1024 * 1024 // 15MiB
                };
            try
            {
                var newCombat = JsonSerializer.Deserialize<DCCombat>(json, options);
                if (newCombat != null)
                {
                    if (CombatService.GetCombatFromGUID(newCombat.Id.ToString()) == null)
                    {
                        CombatService.AddCombat(newCombat);
                        Debug.WriteLine($"Added new combat '{newCombat.Name}'");
                        foreach (DCCreature creature in newCombat.CreaturesList)
                        {
                            if (CombatService.GetCreatureFromGUID(creature.Id.ToString()) == null)
                            {
                                CombatService.AddCreature(creature);
                                Debug.WriteLine($"Add '{creature.Name}' creature");
                            }
                        }

                        if (CombatService.IsCurrentCulture("fr"))
                        {
                            PopupNotificationService.Show("Importation", $"Combat '{newCombat.Name}' importé avec succès", PopupNotificationService.Type.SUCCESS, 3000);
                        } else
                        {
                            PopupNotificationService.Show("Combat import", $"Successfully imported '{newCombat.Name}'", PopupNotificationService.Type.SUCCESS, 3000);
                        }
                    }
                    else
                    {
                        Debug.WriteLine($"The combat '{newCombat.Name}' already exists.");
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                try
                {
                    Debug.WriteLine("File does not contain a single creature. Trying a Creature list.");

                    var newCombatList = JsonSerializer.Deserialize<List<DCCombat>>(json, options);

                    if (newCombatList != null)
                    {
                        foreach (DCCombat combat in newCombatList)
                        {
                            if (CombatService.GetCombatFromGUID(combat.Id.ToString()) == null)
                            {
                                CombatService.AddCombat(combat);
                                Debug.WriteLine($"Added new combat '{combat.Name}'");
                                foreach (DCCreature creature in combat.CreaturesList)
                                {
                                    if (CombatService.GetCreatureFromGUID(creature.Id.ToString()) == null)
                                    {
                                        CombatService.AddCreature(creature);
                                        Debug.WriteLine($"Add '{creature.Name}' creature");
                                    }
                                }

                                if (CombatService.IsCurrentCulture("fr"))
                                {
                                    PopupNotificationService.Show("Importation", "Combat(s) importés avec succès", PopupNotificationService.Type.SUCCESS, 3000);
                                } else
                                {
                                    PopupNotificationService.Show("Combat import", "Successfully imported multiple combats", PopupNotificationService.Type.SUCCESS, 3000);
                                }
                            }
                            else
                            {
                                Debug.WriteLine($"The combat '{combat.Name}' already exists.");
                            }
                        }
                    }
                }
                catch (Exception ex1)
                {
                    Debug.WriteLine(ex1.Message);
                    Debug.WriteLine("File does not contain any valid combat.");
                    if (CombatService.IsCurrentCulture("fr"))
                    {
                        PopupNotificationService.Show("Importation", "Le fichier ne contient aucun combat valide", PopupNotificationService.Type.FAILURE, 4000);
                    } else
                    {
                        PopupNotificationService.Show("Combat import", "File does not contain any valid combat", PopupNotificationService.Type.FAILURE, 4000);
                    }
                }
            }
        }
        else
        {
            Debug.WriteLine("File does not contain any data.");
            if (CombatService.IsCurrentCulture("fr"))
            {
                PopupNotificationService.Show("Importation", "Le fichier ne contient aucune donnée", PopupNotificationService.Type.FAILURE, 4000);
            }
            else
            {
                PopupNotificationService.Show("Combat import", "File does not contain any data", PopupNotificationService.Type.FAILURE, 4000);
            }
        }
    }
}