@page "/creaturesexplorer/"

@using System.Text.Json
@inject DiceCombatsService CombatService
@inject NavigationManager Navigation
@inject IFileHandler FileHandler
@inject PopupNotificationService PopupNotificationService

<style>
    .CreatureViewerCreature {
        padding: 10px;
        margin: 5px;
        border-radius: 10px;
        background-color: #303030;
    }
</style>

<div style="padding-top:10px; padding-bottom:20px; display: flex; justify-content: flex-end; align-items: center;">
    <MudStack Row="true" Wrap="Wrap.Wrap">
        <MudButton OnClick="@(() => Navigation.NavigateTo("/newcreature"))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="@Color.Primary" Size="Size.Large">New creature</MudButton>
        <MudButton OnClick="@(() => ExportAllCreatures())" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Upload" Color="@Color.Primary" Size="Size.Large">Export creatures</MudButton>
        <MudButton OnClick="@(() => ImportCreatures())" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Download" Color="@Color.Primary" Size="Size.Large">Import one or multiple creatures</MudButton>
    </MudStack>
</div>

<div style="margin-bottom:20px;">
    <h3><span style="padding:5px;border-radius:10px;background-color:darkcyan">Creatures</span></h3>
</div>
<div style="background-color:#0F0F0F;padding:20px;border-radius:10px;">
    @for (char chr = 'a'; chr < 'z'; chr++)
    {
        @if (CombatService.GetCreatureList().Find(x => x.Name.ToLower().StartsWith(chr) && x.IsPlayer == false) != null)
        {
            <div style="border-bottom:solid; border-bottom-width:1px; border-bottom-color:grey;">
                <h4>@chr.ToString().ToUpper()</h4>
            </div>
            <div class="row">
                @foreach (DCCreature creature in CombatService.GetCreatureList().FindAll(x => x.Name.ToLower().StartsWith(chr) && x.IsPlayer == false))
                {
                    <div class="col col-md-3 CreatureViewerCreature">
                        <MudStack Row="true">
                            <h4>@creature.Name</h4>
                            <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                                <MudIconButton OnClick="() => Edit(creature)" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Edit" Color="@Color.Primary" Size="Size.Large" title="Edit"></MudIconButton>
                                <MudIconButton OnClick="() => ExportCreature(creature)" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Upload" Color="@Color.Primary" Size="Size.Large" title="Export to file"></MudIconButton>
                                <MudIconButton OnClick="() => CombatService.DeleteCreature(creature)" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Delete" Color="@Color.Error" Size="Size.Large" title="Delete"></MudIconButton>
                            </MudButtonGroup>
                        </MudStack>
                    </div>
                }
            </div>
        }
    }

</div>

<div style="margin-top:20px;margin-bottom:20px;">
    <h3><span style="padding:5px;border-radius:10px;background-color:darkcyan">Players</span></h3>
</div>
<div style="background-color:#0F0F0F;padding:20px;border-radius:10px;">
    @for (char chr = 'a'; chr < 'z'; chr++)
    {
        @if (CombatService.GetCreatureList().Find(x => x.Name.ToLower().StartsWith(chr) && x.IsPlayer == true) != null)
        {
            <div style="border-bottom:solid; border-bottom-width:1px; border-bottom-color:grey;">
                <h4>@chr.ToString().ToUpper()</h4>
            </div>
            <div class="row">
                @foreach (DCCreature creature in CombatService.GetCreatureList().FindAll(x => x.Name.ToLower().StartsWith(chr) && x.IsPlayer == true))
                {
                    <div class="col col-md-3 CreatureViewerCreature">
                        <MudStack Row="true">
                            <h4>@creature.Name</h4>
                            <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                                <MudIconButton OnClick="() => Edit(creature)" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Edit" Color="@Color.Primary" Size="Size.Large" title="Edit"></MudIconButton>
                                <MudIconButton OnClick="() => ExportCreature(creature)" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Upload" Color="@Color.Primary" Size="Size.Large" title="Export to file"></MudIconButton>
                                <MudIconButton OnClick="() => CombatService.DeleteCreature(creature)" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Delete" Color="@Color.Error" Size="Size.Large" title="Delete"></MudIconButton>
                            </MudButtonGroup>
                        </MudStack>
                    </div>
                }
            </div>
        }
    }

</div>

@code {
    private void Edit(DCCreature creature)
    {
        Navigation.NavigateTo($"/creaturemanager/{creature.Id.ToString()}");
    }

    private async Task ExportCreature(DCCreature creature)
    {
        var options = new JsonSerializerOptions
            {
                WriteIndented = true,
                DefaultBufferSize = 15 * 1024 * 1024 // 15MiB
            };
        string json = JsonSerializer.Serialize(creature, options);

        var fileName = $"DC_creature_{creature.Name}.json";
        var data = System.Text.Encoding.UTF8.GetBytes(json);

        await FileHandler.SaveFileAsync(fileName, data);

        PopupNotificationService.Show("Creature export", $"Successfully exported '{creature.Name}'", PopupNotificationService.Type.SUCCESS, 3000);
    }

    private async Task ExportAllCreatures()
    {
        var options = new JsonSerializerOptions
            {
                WriteIndented = true,
                DefaultBufferSize = 15 * 1024 * 1024 // 15MiB
            };
        string json = JsonSerializer.Serialize(CombatService.GetCreatureList(), options);

        var fileName = $"DC_all_creatures.json";
        var data = System.Text.Encoding.UTF8.GetBytes(json);

        await FileHandler.SaveFileAsync(fileName, data);

        PopupNotificationService.Show("Creature export", "Successfully exported all creatures", PopupNotificationService.Type.SUCCESS, 3000);
    }

    private async Task ImportCreatures()
    {
        var fileData = await FileHandler.LoadFileAsync();
        if (fileData != null)
        {
            string json = System.Text.Encoding.UTF8.GetString(fileData);
            var options = new JsonSerializerOptions
                {
                    DefaultBufferSize = 15 * 1024 * 1024 // 15MiB
                };
            try
            {
                var newCreature = JsonSerializer.Deserialize<DCCreature>(json, options);
                if (newCreature != null)
                {
                    if (CombatService.GetCreatureFromGUID(newCreature.Id.ToString()) == null)
                    {
                        CombatService.AddCreature(newCreature);
                        Debug.WriteLine($"Added new creature '{newCreature.Name}'");
                    }
                    else
                    {
                        Debug.WriteLine($"The creature '{newCreature.Name}' already exists.");
                    }
                    PopupNotificationService.Show("Creature import", $"Successfully imported {newCreature.Name}", PopupNotificationService.Type.SUCCESS, 3000);
                }
            }
            catch
            {
                try
                {
                    Debug.WriteLine("File does not contain a single creature. Trying a Creature list.");

                    var newCreatureList = JsonSerializer.Deserialize<List<DCCreature>>(json, options);

                    if (newCreatureList != null)
                    {
                        foreach (DCCreature creature in newCreatureList)
                        {
                            if (CombatService.GetCreatureFromGUID(creature.Id.ToString()) == null)
                            {
                                CombatService.AddCreature(creature);
                                Debug.WriteLine($"Added new creature '{creature.Name}'");
                            }
                            else
                            {
                                Debug.WriteLine($"The creature '{creature.Name}' already exists.");
                            }
                        }
                        PopupNotificationService.Show("Creature import", "Successfully imported multiple creatures", PopupNotificationService.Type.SUCCESS, 3000);
                    }
                }
                catch
                {
                    Debug.WriteLine("File does not contain any valid creature.");
                    PopupNotificationService.Show("Creature import", "File does not contain any valid creature", PopupNotificationService.Type.FAILURE, 4000);
                }
            }
        }
        else
        {
            Debug.WriteLine("File does not contain any data.");
            PopupNotificationService.Show("Creature import", "File does not contain any data", PopupNotificationService.Type.FAILURE, 4000);
        }
    }
}
