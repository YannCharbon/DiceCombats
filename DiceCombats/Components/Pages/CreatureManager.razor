@*
 * DiceCombats - Copyright (C) 2025 Yann Charbon
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 * This file is part of DiceCombats, released under the GNU GPL v3.
 * See the LICENSE file in the repository root for details.
*@

@page "/creaturemanager/{CreatureGuid}"

@using System.Net
@using Markdig
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using HtmlAgilityPack

@inject DiceCombatsService CombatService
@inject NavigationManager Navigation

<style>
    .markdown-content {
    color: white;
    }

    .markdown-content table,
    .markdown-content th,
    .markdown-content td {
    border: 1px solid white;
    padding: 5px;
    }

    .markdown-content th,
    .markdown-content td {
    background-color: #004D40;
    }

    .one-column-item {
    display: block;
    width: calc(50% - 1rem); /* Adjust width for 3 items per row */
    margin-bottom: 1rem;
    }

    @@media screen and (max-width: 480px) {
    .one-column-item {
    width: 95%; /* Single column for narrow screens */
    }
    }
</style>

@if (creature == null)
{
    <p>@(CreatureGuid) does not exist</p>
} else
{
    <MudStack Row="true" Wrap="Wrap.Wrap">
        <h1>@creature.Name</h1>
        <MudButton OnClick="Save" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Check" IconColor="Color.Primary" Size="Size.Large">Stop editing</MudButton>
        <MudButton OnClick="Delete" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" IconColor="Color.Error" Size="Size.Large">Delete</MudButton>
        <MudCheckBox Variant="Variant.Filled" Label="Edition mode" @bind-Value="_editionMode"></MudCheckBox>
    </MudStack>

    <div style="padding:10px">
        @if (creature.ImageSheetBas64 != string.Empty)
        {
            <img src="@creature.ImageSheetBas64" height="400px" />
        }
        else if (creature.HtmlSheet != string.Empty)
        {
            <div style="color:black;">
                @((MarkupString)creature.HtmlSheet)
            </div>
        }
        else if (creature.MarkdownSheet != string.Empty)
        {
            if (_editionMode == true)
            {
                <div style="display:flex;flex-wrap:wrap;">
                    <div class="one-column-item" style="padding:10px;">
                        <MudTextField DebounceInterval="500" AutoGrow MaxLines="20" Label="Edit Markdown" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" T="string" Value="@creature.MarkdownSheet" ValueChanged="@_previewMarkdownSheet"></MudTextField>
                    </div>
                    <div class="markdown-content one-column-item" style="padding:10px;">
                        @((MarkupString)creature.GetMarkdownSheetAsHtml())
                    </div>
                </div>
            } else
            {
                <div class="markdown-content">
                    @((MarkupString)creature.GetMarkdownSheetAsHtml())
                </div>
            }
        }
        else if (creature.IsPlayer)
        {
            <h3>Player</h3>
        }
        else if (creature.IsManual)
        {}
        else
        {
            <p>Could not render creature sheet</p>
        }
    </div>
    <div style="padding:10px;">
        <CreatureCustomFieldsEditor Fields="creature.CustomFields" EditionMode="_editionMode" />
    </div>
}

@code {
    [Parameter]
    public string CreatureGuid { get; set; } = default!;


    private DCCreature? creature = null;
    private bool _editionMode = true;

    protected override void OnInitialized()
    {
        creature = CombatService.GetCreatureFromGUID(CreatureGuid);
        base.OnInitialized();
    }

    private void Save()
    {
        if (creature != null)
        {
            CombatService.SaveCreatures();
        }
        Navigation.NavigateTo($"/creaturesexplorer");
    }

    private void Delete()
    {
        if (creature != null)
        {
            CombatService.DeleteCreature(creature);
        }
        Navigation.NavigateTo($"/creaturesexplorer");
    }

    private async Task _previewMarkdownSheet(string markdownSheet)
    {
        if (creature == null)
        {
            return;
        }
        creature.SetMarkdownSheet(markdownSheet);
        await InvokeAsync(StateHasChanged);
    }
}