@*
 * DiceCombats - Copyright (C) 2025 Yann Charbon
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 * This file is part of DiceCombats, released under the GNU GPL v3.
 * See the LICENSE file in the repository root for details.
*@

@page "/combatmanager/{CombatGuid}"
@using System.Timers

@inject DiceCombatsService CombatService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<style>
    .CombatEditorFloatingInitiativeWindow {
    position: fixed;
    bottom: 50px;
    right: 10px;
    width: 450px;
    background-color: #303030;
    border: 1px solid #505050;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(255, 255, 255, 0.1);
    padding: 10px;
    z-index: 1000;
    max-height: 450px;
    overflow-y: scroll;
    overflow-x: hidden;
    zoom: 0.85;
    }

    @@media screen and (max-width: 768px) {
    .CombatEditorFloatingInitiativeWindow {
    width: calc(100% - 1rem);
    max-height: 350px;
    }
    }

    .CombatEditorCreatureLayout {
    background-color: #303030;
    box-shadow: 0 2px 10px rgba(255, 255, 255, 0.1);
    border: 1px solid #505050;
    padding: 5px;
    border-radius: 10px;
    }

    .CombatEditorCustomFieldsLayout {
    box-shadow: 0 2px 10px rgba(255, 255, 255, 0.1);
    border: 1px solid #505050;
    padding: 5px;
    border-radius: 10px;
    }

    .NotesLabel label {
    background-color: #004D40;
    color: white;
    padding: 2px;
    border-radius: 4px;
    }

    .markdown-content {
    color: white;
    }

    .markdown-content table,
    .markdown-content th,
    .markdown-content td {
    border: 1px solid white;
    padding: 5px;
    }

    .markdown-content th,
    .markdown-content td {
    background-color: #004D40;
    }


    .masonry-layout {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem; /* Space between items */
    zoom:0.85;
    }

    .masonry-item {
    display: block;
    width: calc(50% - 1rem); /* Adjust width for 3 items per row */
    margin-bottom: 1rem;
    }

    @@media screen and (max-width: 768px) {
    .masonry-item {
    width: calc(100% - 1rem); /* Adjust for smaller screens */
    }
    }

    @@media screen and (max-width: 480px) {
    .masonry-item {
    width: 100%; /* Single column for narrow screens */
    }
    }

    .play-pause-stop-button {
        border-radius: 30px;
        border-width: 2px;
        border-color: var(--mud-palette-primary);
        color: var(--mud-palette-primary);
        padding: 3px;
        cursor: pointer;
    }
</style>

<script>
    window.initializeMasonry = (selector) => {
    const grid = document.querySelector(selector);
    if (grid) {
    new Masonry(grid, {
    itemSelector: '.masonry-item',
    columnWidth: '.masonry-item',
    percentPosition: true,
    gutter: 10
    });
    }
    };
</script>

<GenericModal TContent="CreaturesSelector" OnClose="HandleCreaturesSelectorModalClose" @ref="CreaturesSelectorModalRef">
    <CreaturesSelector Combat="_combat" />
</GenericModal>

<div class="CombatEditorFloatingInitiativeWindow">
    <MudGrid Style="padding:10px;">
        <MudItem><h3>Initiative</h3></MudItem>
        @if (_initiativeWindowsMaximized)
        {
            <MudItem><MudIcon @onclick="SortCreaturesInitiativeRankByRoll" Icon="@Icons.Material.Filled.Sort" Title="Sort" Style="cursor:pointer;background-color:darkcyan;border-radius:5px;" Size="@Size.Large"></MudIcon></MudItem>
            <MudItem><MudIcon @onclick="CreaturesInitiativeReset" Icon="@Icons.Material.Filled.Sync" Title="Reset" Style="cursor:pointer;background-color:darkcyan;border-radius:5px;" Size="@Size.Large"></MudIcon></MudItem>
            <MudItem sm="2"><MudIcon @onclick="() => _initiativeWindowsMaximized = false" Icon="@Icons.Material.Filled.ArrowCircleDown" Title="Reduce" Style="cursor:pointer;" Size="@Size.Large"></MudIcon></MudItem>
        }
        else
        {
            <MudItem sm="2"><MudIcon @onclick="() => _initiativeWindowsMaximized = true" Icon="@Icons.Material.Filled.ArrowCircleUp" Title="Maximize" Style="cursor:pointer;" Size="@Size.Large"></MudIcon></MudItem>
        }
    </MudGrid>

    @if (_initiativeWindowsMaximized)
    {
        <table>
            <tr style="border-bottom:solid; border-bottom-width:1px;">
                <th>Creature</th>
                <th>Roll</th>
                <th>Order</th>
                <th>Quick link</th>
            </tr>
            @foreach (DCCreature creature in _initiativeWindowCreatureListCopy)
            {
                <tr style="border-bottom:solid; border-bottom-width:1px;">
                    <td style="width:240px;padding:5px;">@creature.Name</td>
                    <td style="width:60px;padding:5px;"><MudNumericField T="int" Style="color:#A0A0A0;" @bind-Value="creature.InitiativeRoll"></MudNumericField></td>
                    <td style="width:60px;padding:5px;"><MudNumericField T="int" Style="color:white;font-weight:bold;font-size:16pt" @bind-Value="creature.InitiativeRank"></MudNumericField></td>
                    <td style="width:120px;padding:5px;">
                        <a style="cursor:pointer;border-radius:30px;padding:5px;background-color:darkcyan;" onclick="@($"scrollToElementById('{creature.Id.ToString()}')")">Quick jump</a>
                    </td>
                </tr>
            }
        </table>
    }
</div>

<div style="display:flex; flex-wrap:wrap; justify-content:space-between; align-items:start; padding-bottom:5px;">
    <MudStack Row="true" Style="padding-bottom:20px;" Wrap="Wrap.Wrap">
        <MudStack Row="true">
            <h1>@_combat.Name</h1>
            <MudButton OnClick="() => CreaturesSelectorModalRef?.Show()" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" IconColor="Color.Primary" Size="Size.Large">Edit</MudButton>
        </MudStack>
    </MudStack>
    <MudStack Row="true" AlignItems="AlignItems.Center">
        @if (_timer.Enabled)
        {
            <MudIcon Class="play-pause-stop-button" Size="Size.Large" @onclick="PauseTimer" Icon="@Icons.Material.Filled.Pause" />
        }
        else
        {
            <MudIcon Class="play-pause-stop-button" Size="Size.Large" @onclick="StartTimer" Icon="@Icons.Material.Filled.PlayArrow" />
        }
        <MudIcon Class="play-pause-stop-button" Size="Size.Large" @onclick="StopTimer" Icon="@Icons.Material.Filled.Stop" />
        <MudItem Style="font-size: large;">@GetDurationAsString()</MudItem>
    </MudStack>
</div>


<div style="margin-top:5px;margin-bottom:10px;">
    <MudTextField AutoGrow spellcheck="false" @bind-Value="_combat.Notes" Label="Notes" Class="NotesLabel" Variant="Variant.Outlined"></MudTextField>
</div>

<div id="masonry-layout" class="masonry-layout">
    @foreach (DCCreature creature in _combat.CreaturesList)
    {
        <div class="masonry-item">
            <div class="CombatEditorCreatureLayout">
                <div style="padding:10px" id="@creature.Id.ToString()">
                    @if (creature.ImageSheetBas64 != string.Empty)
                    {
                        <h1>@creature.Name</h1>
                        <img src="@creature.ImageSheetBas64" height="500px" />
                    }
                    else if (creature.HtmlSheet != string.Empty)
                    {
                        <div style="color:black">
                            @((MarkupString)creature.HtmlSheet)
                        </div>
                    }
                    else if (creature.MarkdownSheet != string.Empty)
                    {
                        <div class="markdown-content">
                            @((MarkupString)creature.GetMarkdownSheetAsHtml())
                        </div>
                    }
                    else if (creature.IsPlayer)
                    {
                        <h1>@creature.Name</h1>
                    }
                    else if (creature.IsManual)
                    {
                        <h1>@creature.Name</h1>
                    }
                    else
                    {
                        <p>Could not render creature sheet</p>
                    }
                </div>
                @{
                    // Prepare data for rendering
                    var allInstanceCustomFields = _combat.GetCreatureInstancesCustomFields(creature);
                    var sharedFields = allInstanceCustomFields.First()
                        .Where(x => x.SharedAcrossCreatureInstances)
                        .ToList();
                    var nonSharedFields = allInstanceCustomFields.First()
                        .Where(x => !x.SharedAcrossCreatureInstances)
                        .ToList();
                }

                <div style="padding:10px;">
                    @* Render shared fields (once for all instances) *@
                    @if (sharedFields.Any())
                    {
                        <div class="CombatEditorCustomFieldsLayout" style="border-color:#F9F9F9;padding:10px;border-radius:10px;border-width:2px;margin:10px;box-shadow: 0 2px 10px #FFFFFF;">
                            <div class="d-flex flex-wrap gap-2" style="align-items:center;">
                                @foreach (var field in sharedFields)
                                {
                                    <div>
                                        <MudPaper Class="d-flex align-center justify-center" Style="padding:5px;">
                                            <CreatureCustomFieldRenderer Field="field" EditionMode="false" OnChange="OnCustomFieldChanged" />
                                        </MudPaper>
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    @if (nonSharedFields.Count > 0)
                    {
                        @* Render non-shared fields for each creature instance *@
                        @foreach (var instanceCustomFields in allInstanceCustomFields)
                        {
                            <div class="CombatEditorCustomFieldsLayout" style="@($"border-color:{ instanceCustomFields.Find(x => x is DCCreatureColorField)?.GetValue() ?? "#F9F9F9"};padding:10px;border-radius:10px;border-width:2px;margin:10px;box-shadow: 0 2px 10px { instanceCustomFields.Find(x => x is DCCreatureColorField)?.GetValue() ?? "#FFFFFF"};")">
                                <div class="d-flex flex-wrap gap-2" style="align-items:center;">
                                    @foreach (var field in instanceCustomFields.Where(x => !x.SharedAcrossCreatureInstances).ToList())
                                    {
                                        <div>
                                            <MudPaper Class="d-flex align-center justify-center" Style="padding:5px;">
                                                <CreatureCustomFieldRenderer Field="field" EditionMode="false" OnChange="OnCustomFieldChanged" />
                                            </MudPaper>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    }
</div>
<div style="height:450px">
    <!--Some margin-->
</div>


@code {
    [Parameter]
    public string CombatGuid { get; set; } = "new";

    private DCCombat _combat = new DCCombat("New combat");

    private List<DCCreature> _initiativeWindowCreatureListCopy = new List<DCCreature>();

    private GenericModal<CreaturesSelector>? CreaturesSelectorModalRef;

    private bool _initiativeWindowsMaximized = true;

    private System.Timers.Timer _timer = new System.Timers.Timer(1000);

    protected override void OnInitialized()
    {
        Debug.WriteLine(CombatGuid);
        if (CombatGuid != "new")
        {
            var combat = CombatService.GetCombatList().Find(x => x.Id.ToString() == CombatGuid);
            if (combat != null)
            {
                _combat = combat;
            }
            else
            {
                _combat = new DCCombat("New combat");
            }
        }

        _initiativeWindowCreatureListCopy = _combat.CreaturesList.ToList();

        SortCreaturesInitiativeRankByRoll();

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("initializeMasonry", "#masonry-layout");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender && _combat.CreaturesList.Count == 0)
        {
            // New combat so we directly go to edition mode
            CreaturesSelectorModalRef?.Show();
        }
    }

    private void OnCustomFieldChanged()
    {
        StateHasChanged();
    }

    private void SortCreaturesInitiativeRankByRoll()
    {
        _initiativeWindowCreatureListCopy = _initiativeWindowCreatureListCopy.OrderByDescending(x => x.InitiativeRoll).ToList();

        if (_initiativeWindowCreatureListCopy.Count <= 0)
        {
            return;
        }

        int lastRoll = _initiativeWindowCreatureListCopy[0].InitiativeRoll;
        int currentRank = 1;

        for (int i = 0; i < _initiativeWindowCreatureListCopy.Count(); i++)
        {
            if (_initiativeWindowCreatureListCopy[i].InitiativeRoll < lastRoll)
            {
                currentRank++;
            }
            _initiativeWindowCreatureListCopy[i].InitiativeRank = currentRank;
            lastRoll = _initiativeWindowCreatureListCopy[i].InitiativeRoll;
        }
    }

    private void CreaturesInitiativeReset()
    {
        foreach (DCCreature creature in _initiativeWindowCreatureListCopy)
        {
            creature.InitiativeRoll = 0;
            creature.InitiativeRank = 0;
        }
    }

    private void OpenCreaturesSelectorModal()
    {
        CreaturesSelectorModalRef?.Show();
    }

    private void HandleCreaturesSelectorModalClose(bool result)
    {
        _initiativeWindowCreatureListCopy = _combat.CreaturesList.ToList();

        SaveCombat();
    }

    private void SaveCombat()
    {
        var combats = CombatService.GetCombatList();
        var combat = combats.Find(x => x.Id == _combat.Id);
        if (combat != null)
        {
            CombatService.DeleteCombat(combat);
        }

        CombatService.AddCombat(_combat);

        CombatService.SaveCombats();
    }

    private void TimerElapsed(Object? source, ElapsedEventArgs? e)
    {
        if (source is null || e is null)
        {
            throw new ArgumentNullException(nameof(e));
        }

        _combat.DurationCount++;
        InvokeAsync(StateHasChanged);
    }

    private void StartTimer()
    {
        _timer.Elapsed += TimerElapsed;
        _timer.Start();
        _timer.Enabled = true;
    }

    private void PauseTimer()
    {
        _timer.Enabled = false;
    }

    private void StopTimer()
    {
        _timer.Stop();
        _timer.Enabled = false;
        _timer.Elapsed -= TimerElapsed;
        _combat.DurationCount = 0;
    }

    private string GetDurationAsString()
    {
        TimeSpan ts = TimeSpan.FromSeconds(_combat.DurationCount);
        DateTime dt = new DateTime(ts.Ticks);
        return dt.ToString("HH:mm:ss");
    }

}
