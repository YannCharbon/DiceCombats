@using DiceCombats
@using MudBlazor.Utilities
@inject DiceCombatsService CombatService

<style>
    .CreatureCustomFieldRendererFieldTitle {
        padding:10px;
    }

    .CreatureCustomFieldRendererCheckBoxGridLabels {
        font-size:10pt;
        padding: 4px;
    }

    .DnDConditionsFieldItem {
        border-radius: 100px;
        padding: 5px;
        display: flex; /* Enables Flexbox */
        align-items: center; /* Aligns content vertically */
        justify-content: center; /* Aligns content horizontally (optional) */
        text-align: center;
        font-weight: 400;
        font-size: 18px;
        box-shadow: 0 2px 10px rgba(255, 255, 255, 0.1);
    }
</style>

@if (EditionMode)
{
    <MudGrid>
        <MudItem sm="4">
            <MudTextField Immediate="true" @bind-Value="Field.Title" Label="Edit field name" Variant="Variant.Outlined" />
        </MudItem>
        <MudItem sm="7">
            @if (CombatService.GetUserCreatureCustomFieldByName(Field.Title) == null)
            {
                <MudButton OnClick="@(() => CombatService.AddUserCreatureCustomField(Field))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.PersonAddAlt1" Color="@Color.Primary" Size="Size.Large">Add to custom fields</MudButton>
            } else
            {
                <MudButton OnClick="@(() => CombatService.RemoveUserCreatureCustomFieldByName(Field.Title))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.PersonRemove" Color="@Color.Error" Size="Size.Large">Remove from custom fields</MudButton>
            }
        </MudItem>
    </MudGrid>

    @if (Field is DCCreatureHitPointsField hitPointsField)
    {
        <MudNumericField @bind-Value="hitPointsField.MaximumHP" Label="Maximum HP" Variant="Variant.Outlined" />
    }
    else if (Field is DCCreatureNumericField numericField)
    {
        <MudNumericField @bind-Value="numericField.Value" Label="@Field.Title" Variant="Variant.Outlined" />
    }
    else if (Field is DCCreatureTextField textField)
    {
        <MudTextField @bind-Value="textField.Text" Label="@Field.Title" Variant="Variant.Outlined" />
    }
    else if (Field is DCCreatureCheckboxField checkBoxField)
    {
        <MudStack Row="true" style="padding-top:5px;padding-bottom:5px;">
            <MudButton OnClick="@(() => checkBoxField.AddOption())" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="@Color.Primary" Size="Size.Large">Add option</MudButton>
            <MudCheckBox T="bool" @bind-Value="checkBoxField.ShowTextFields" Label="Show text fields"></MudCheckBox>
        </MudStack>
        <div class="d-flex flex-wrap gap-4">
            @foreach (int i in Enumerable.Range(0, checkBoxField.Labels.Count))
            {
                <MudStack Row="true" Style=" padding:5px;background-color:#404040;border-radius:5px;">
                    <MudTextField Immediate="true" @bind-Value="checkBoxField.Labels[i]" Label="Option label" Variant="Variant.Outlined" />
                    <MudCheckBox Label="@checkBoxField.Labels[i]" @bind-Value="checkBoxField.SelectedOptions[i]"></MudCheckBox>
                    @if (checkBoxField.ShowTextFields == true)
                    {
                        <MudTextField Immediate="true" @bind-Value="checkBoxField.TextFieldsLabels[i]" Label="Option text field label" Variant="Variant.Outlined" />
                    }
                    <MudButton OnClick="@(() => checkBoxField.RemoveOption(checkBoxField.Labels[i]))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="@Color.Secondary" Size="Size.Medium">Delete</MudButton>
                </MudStack>
            }
        </div>
    }
    else if (Field is DCCreatureCheckboxGridField checkboxGridField)
    {
        <div class="row">
            <div class="col col-md-2">
                <MudNumericField @bind-Value="checkboxGridField.Columns" Label="Horizontal checkbox count" Variant="Variant.Outlined" Min="1" />
            </div>
            <div class="col col-md-2">
                <MudNumericField @bind-Value="checkboxGridField.Rows" Label="Vertical checkbox count" Variant="Variant.Outlined" Min="1" />
            </div>
            <div class="col col-md-2">
                <MudCheckBox T="bool" @bind-Value="checkboxGridField.HasColumnHeaders" Label="Column labels"></MudCheckBox>
            </div>
            <div class="col col-md-2">
                <MudCheckBox T="bool" @bind-Value="checkboxGridField.HasRowHeaders" Label="Row labels"></MudCheckBox>
            </div>
        </div>

        <div style="padding:10px;">
            <table>
                @if (checkboxGridField.HasColumnHeaders)
                {
                    <tr>
                        @if (checkboxGridField.HasRowHeaders)
                        {
                            <td>&nbsp;</td>
                        }
                        @foreach (int i in Enumerable.Range(0, checkboxGridField.ColumnHeaders.Count))
                        {
                            <td><MudTextField Immediate="true" @bind-Value="checkboxGridField.ColumnHeaders[i]" Label="Edit column name" Variant="Variant.Outlined" /></td>
                        }
                    </tr>
                }
                @foreach (int i in Enumerable.Range(0, checkboxGridField.Rows))
                {
                    <tr>
                        @if (checkboxGridField.HasRowHeaders)
                        {
                            <td><MudTextField Immediate="true" @bind-Value="checkboxGridField.RowHeaders[i]" Label="Edit row name" Variant="Variant.Outlined" /></td>

                        }
                        @foreach (int j in Enumerable.Range(0, checkboxGridField.Columns))
                        {
                            <td>
                                <input type="checkbox" @bind="checkboxGridField.GridState[i][j]" />
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
    }
    else if (Field is DCCreatureColorField colorField)
    {
        <MudColorPicker Variant="Variant.Outlined" ColorPickerView="ColorPickerView.GridCompact" Label="Basic Color Picker" @bind-Text="colorField.Value" Style="@($"color: {colorField.Value};")" Placeholder="Select Color" />
    }
    else if (Field is DCCreatureDnDConditionsField dndConditionsField)
    {
        <MudStack Row="true" style="padding-top:5px;padding-bottom:5px;">
            <p>This field cannot be edited</p>
        </MudStack>
        <div class="d-flex flex-wrap gap-4">
            @foreach (int i in Enumerable.Range(0, dndConditionsField.Labels.Count))
            {
                <MudStack Row="true" Style="padding:5px;background-color:#404040;border-radius:5px;">
                    <MudTextField Immediate="true" @bind-Value="dndConditionsField.Labels[i]" Label="Option label" Variant="Variant.Outlined" />
                    <MudCheckBox Label="@dndConditionsField.Labels[i]" @bind-Value="dndConditionsField.SelectedOptions[i]"></MudCheckBox>
                </MudStack>
            }
        </div>
    }
}
else
{
    // Normal rendering
    @if (Field is DCCreatureHitPointsField hitPointsField)
    {
        <MudStack Row="true" Style="display: flex;justify-content: center;align-items: center;">
            <MudNumericField @bind-Value="hitPointsField.CurrentHP" Variant="Variant.Outlined" Style="width:150px;" Adornment="Adornment.End" AdornmentText="@(" / " + hitPointsField.MaximumHP.ToString() + " HP")" />
        </MudStack>
    }
    else if (Field is DCCreatureNumericField numericField)
    {
        <MudNumericField @bind-Value="numericField.Value" Label="@Field.Title" Variant="Variant.Outlined" />
    }
    else if (Field is DCCreatureTextField textField)
    {
        <MudTextField AutoGrow @bind-Value="textField.Text" Label="@Field.Title" Variant="Variant.Outlined" />
    }
    else if (Field is DCCreatureCheckboxField checkBoxField)
    {
        <MudStack Row="true">
            @foreach (int i in Enumerable.Range(0, checkBoxField.Labels.Count))
            {
                <MudCheckBox Label="@checkBoxField.Labels[i]" @bind-Value="checkBoxField.SelectedOptions[i]"></MudCheckBox>
                @if (checkBoxField.ShowTextFields == true)
                {
                    <MudTextField AutoGrow @bind-Value="checkBoxField.TextFields[i]" Label="@checkBoxField.TextFieldsLabels[i]" Variant="Variant.Outlined" />
                }
            }
        </MudStack>
    }
    else if (Field is DCCreatureCheckboxGridField checkboxGridField)
    {
        <span class="CreatureCustomFieldRendererFieldTitle">@checkboxGridField.Title</span>
        <div style="padding:10px;">
            <table>
                @if (checkboxGridField.HasColumnHeaders)
                {
                    <tr>
                        @if (checkboxGridField.HasRowHeaders)
                        {
                            <td>&nbsp;</td>
                        }
                        @foreach (int i in Enumerable.Range(0, checkboxGridField.ColumnHeaders.Count))
                        {
                            <td><span class="CreatureCustomFieldRendererCheckBoxGridLabels">@checkboxGridField.ColumnHeaders[i]</span></td>
                        }
                    </tr>
                }
                @foreach (int i in Enumerable.Range(0, checkboxGridField.Rows))
                {
                    <tr>
                        @if (checkboxGridField.HasRowHeaders)
                        {
                            <td><span class="CreatureCustomFieldRendererCheckBoxGridLabels">@checkboxGridField.RowHeaders[i]</span></td>
                        }
                        @foreach (int j in Enumerable.Range(0, checkboxGridField.Columns))
                        {
                            <td style="padding:3px;">
                                <input type="checkbox" @bind="checkboxGridField.GridState[i][j]" />
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
    }
    else if (Field is DCCreatureColorField colorField)
    {
        <MudStack Row="true" Wrap="Wrap.Wrap">
            @if (_showColorPicker)
            {
                <div @onclick="() => {_showColorPicker = false; NotifyParentOnChange();}">
                    <MudColorPicker
                        PickerVariant="PickerVariant.Static"
                        ColorPickerView="ColorPickerView.GridCompact"
                        Variant="Variant.Outlined" Label="Basic Color Picker"
                        @bind-Text="colorField.Value"
                        Style="@($"color: {colorField.Value ?? ""};")" Placeholder="Select Color" />
                </div>                
                <span style="@($"cursor:pointer;background-color:{colorField.Value ?? ""};border-radius:5px;border-width:1px;border-color:grey;width:50px;height:50px;")" @onclick="() => {_showColorPicker = !_showColorPicker; NotifyParentOnChange();}">&nbsp;Close&nbsp;</span>
            } else
            {
                <span class="CreatureCustomFieldRendererFieldTitle">@colorField.Title</span>
                <span style="@($"cursor:pointer;background-color:{colorField.Value ?? ""};border-radius:5px;border-width:1px;border-color:grey;width:50px;height:50px;")" @onclick="() => {_showColorPicker = !_showColorPicker; NotifyParentOnChange();}">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
            }

            </MudStack>
    }
    else if (Field is DCCreatureDnDConditionsField dndConditionsField)
    {
        <MudStack Row="true" Wrap="Wrap.Wrap" Style="cursor:pointer;" @onclick="() => {_dndConditionsFieldMaximized = !_dndConditionsFieldMaximized;}">
            @if (_dndConditionsFieldMaximized == false) {
                @if (dndConditionsField.SelectedOptions.Count(x => x == true) == 0) {
                    <MudItem><h5>Add condition&nbsp;<MudIcon Icon="@Icons.Material.Filled.KeyboardDoubleArrowRight" Color="Color.Success"></MudIcon></h5></MudItem>
                }
                @foreach (int i in Enumerable.Range(0, dndConditionsField.Labels.Count))
                {
                    @if (dndConditionsField.SelectedOptions[i] == true) {
                        <MudItem class="DnDConditionsFieldItem" style="background-color:#9A7A00;">@dndConditionsField.Labels[i]</MudItem>
                    }
                }
            } else {
                <MudItem style="padding:5px;border-radius:5px;border-color:grey;border-width:thin;"><h5>Minimize&nbsp;<MudIcon Icon="@Icons.Material.Filled.KeyboardDoubleArrowLeft" Color="Color.Success"></MudIcon></h5></MudItem>
                @foreach (int i in Enumerable.Range(0, dndConditionsField.Labels.Count))
                {
                    @if (dndConditionsField.SelectedOptions[i] == true)
                    {
                        <MudItem Style="margin:-10px;padding:-5px;transform: scale(0.9);">
                            <MudCheckBox style="color:#BAAA00;" Label="@dndConditionsField.Labels[i]" @bind-Value="dndConditionsField.SelectedOptions[i]"></MudCheckBox>
                        </MudItem>
                    } else {
                        <MudItem Style="margin:-10px;padding:-5px;transform: scale(0.9);">
                            <MudCheckBox Label="@dndConditionsField.Labels[i]" @bind-Value="dndConditionsField.SelectedOptions[i]"></MudCheckBox>
                        </MudItem>
                    }
                }
            }
        </MudStack>
    }
}

@code {
    [Parameter]
    public DCCreatureCustomField Field { get; set; } = default!;
    [Parameter]
    public bool EditionMode { get; set; } = false;
    [Parameter]
    public EventCallback OnChange { get; set; }

    private bool _showColorPicker = false;

    private bool _dndConditionsFieldMaximized = false;

    private void NotifyParentOnChange()
    {
        if (OnChange.HasDelegate)
        {
            OnChange.InvokeAsync();
        }
    }

}
