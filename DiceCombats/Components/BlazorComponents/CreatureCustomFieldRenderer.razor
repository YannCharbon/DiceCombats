@using DiceCombats
@using MudBlazor.Utilities
@inject DiceCombatsService CombatService

<style>
    .CreatureCustomFieldRendererFieldTitle {
        padding:10px;
        font-weight:700;
    }

    .CreatureCustomFieldRendererCheckBoxGridLabels {
        font-size:10pt;
        padding: 4px;
    }

    .DnDConditionsFieldItem {
        border-radius: 100px;
        padding: 5px;
        display: flex; /* Enables Flexbox */
        align-items: center; /* Aligns content vertically */
        justify-content: center; /* Aligns content horizontally (optional) */
        text-align: center;
        font-weight: 400;
        font-size: 18px;
        box-shadow: 0 2px 10px rgba(255, 255, 255, 0.1);
    }

    .CreatureCustomFieldRendererFieldLabel label {
        background-color: #004D40;
        color: white;
        padding: 2px;
        border-radius: 4px;
    }

    .CreatureCustomFieldRendererFieldBackground {
        background-color: #4A4A5A;
        border-radius:4px;
    }
</style>

@if (EditionMode)
{
    <MudGrid>
        <MudItem sm="4">
            <MudTextField Immediate="true" @bind-Value="Field.Title" Label="Edit field name" Variant="Variant.Outlined" />
        </MudItem>
        <MudItem sm="4">
            @if (CombatService.GetUserCreatureCustomFieldByName(Field.Title) == null)
            {
                <MudButton OnClick="@(() => CombatService.AddUserCreatureCustomField(Field))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.PersonAddAlt1" Color="@Color.Primary" Size="Size.Large">User field</MudButton>
            } else
            {
                <MudButton OnClick="@(() => CombatService.RemoveUserCreatureCustomFieldByName(Field.Title))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.PersonRemove" Color="@Color.Error" Size="Size.Large">User field</MudButton>
            }
        </MudItem>
        <MudItem sm="2">
            <MudCheckBox @bind-Value="Field.SharedAcrossCreatureInstances" Label="Shared" Variant="Variant.Outlined" />
        </MudItem>
    </MudGrid>

    @if (Field is DCCreatureHitPointsField hitPointsField)
    {
        <MudNumericField @bind-Value="hitPointsField.MaximumHP" Label="Maximum HP" Variant="Variant.Outlined" />
    }
    else if (Field is DCCreatureNumericField numericField)
    {
        <MudNumericField @bind-Value="numericField.Value" Label="@Field.Title" Variant="Variant.Outlined" />
    }
    else if (Field is DCCreatureTextField textField)
    {
        <MudTextField AutoGrow @bind-Value="textField.Text" Label="@Field.Title" Variant="Variant.Outlined" />
    }
    else if (Field is DCCreatureTextGridField textGridField)
    {
        <div class="row">
            <div class="col col-md-2">
                <MudNumericField @bind-Value="textGridField.Columns" Label="Horizontal" Variant="Variant.Outlined" Min="1" />
            </div>
            <div class="col col-md-2">
                <MudNumericField @bind-Value="textGridField.Rows" Label="Vertical" Variant="Variant.Outlined" Min="1" />
            </div>
            <div class="col col-md-2">
                <MudCheckBox T="bool" @bind-Value="textGridField.HasColumnHeaders" Label="Column labels"></MudCheckBox>
            </div>
            <div class="col col-md-2">
                <MudCheckBox T="bool" @bind-Value="textGridField.HasRowHeaders" Label="Row labels"></MudCheckBox>
            </div>
        </div>

        <div style="padding:10px;">
            <table>
                @if (textGridField.HasColumnHeaders)
                {
                    <tr>
                        @if (textGridField.HasRowHeaders)
                        {
                            <td>&nbsp;</td>
                        }
                        @foreach (int i in Enumerable.Range(0, textGridField.ColumnHeaders.Count))
                        {
                            <td><MudTextField Immediate="true" @bind-Value="textGridField.ColumnHeaders[i]" Label="Edit column name" Variant="Variant.Outlined" /></td>
                        }
                    </tr>
                }
                @foreach (int i in Enumerable.Range(0, textGridField.Rows))
                {
                    <tr>
                        @if (textGridField.HasRowHeaders)
                        {
                            <td><MudTextField Immediate="true" @bind-Value="textGridField.RowHeaders[i]" Label="Edit row name" Variant="Variant.Outlined" /></td>

                        }
                        @foreach (int j in Enumerable.Range(0, textGridField.Columns))
                        {
                            <td>
                                <MudCheckBox T="bool" @bind-Value="textGridField.HasTextLabels[i][j]" Label="Show label"></MudCheckBox>
                                @if (textGridField.HasTextLabels[i][j] == true) {
                                    <MudTextField Immediate="true" @bind-Value="textGridField.TextLabels[i][j]" Label="Label" Variant="Variant.Outlined" />
                                }
                                <MudTextField AutoGrow Immediate="true" @bind-Value="textGridField.TextValues[i][j]" Label="@textGridField.TextLabels[i][j]" Variant="Variant.Outlined" />
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
    }
    else if (Field is DCCreatureCheckboxField checkBoxField)
    {
        <MudStack Row="true" style="padding-top:5px;padding-bottom:5px;">
            <MudButton OnClick="@(() => checkBoxField.AddOption())" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="@Color.Primary" Size="Size.Large">Add option</MudButton>
            <MudCheckBox T="bool" @bind-Value="checkBoxField.ShowTextFields" Label="Show text fields"></MudCheckBox>
        </MudStack>
        <div class="d-flex flex-wrap gap-4">
            @foreach (int i in Enumerable.Range(0, checkBoxField.Labels.Count))
            {
                <MudStack Row="true" Style=" padding:5px;background-color:#404040;border-radius:5px;">
                    <MudTextField Immediate="true" @bind-Value="checkBoxField.Labels[i]" Label="Option label" Variant="Variant.Outlined" />
                    <MudCheckBox Label="@checkBoxField.Labels[i]" @bind-Value="checkBoxField.SelectedOptions[i]"></MudCheckBox>
                    @if (checkBoxField.ShowTextFields == true)
                    {
                        <MudTextField Immediate="true" @bind-Value="checkBoxField.TextFieldsLabels[i]" Label="Option text field label" Variant="Variant.Outlined" />
                    }
                    <MudButton OnClick="@(() => checkBoxField.RemoveOption(checkBoxField.Labels[i]))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="@Color.Secondary" Size="Size.Medium">Delete</MudButton>
                </MudStack>
            }
        </div>
    }
    else if (Field is DCCreatureCheckboxGridField checkboxGridField)
    {
        <div class="row">
            <div class="col col-md-2">
                <MudNumericField @bind-Value="checkboxGridField.Columns" Label="Horizontal" Variant="Variant.Outlined" Min="1" />
            </div>
            <div class="col col-md-2">
                <MudNumericField @bind-Value="checkboxGridField.Rows" Label="Vertical" Variant="Variant.Outlined" Min="1" />
            </div>
            <div class="col col-md-2">
                <MudCheckBox T="bool" @bind-Value="checkboxGridField.HasColumnHeaders" Label="Column labels"></MudCheckBox>
            </div>
            <div class="col col-md-2">
                <MudCheckBox T="bool" @bind-Value="checkboxGridField.HasRowHeaders" Label="Row labels"></MudCheckBox>
            </div>
        </div>

        <div style="padding:10px;">
            <table>
                @if (checkboxGridField.HasColumnHeaders)
                {
                    <tr>
                        @if (checkboxGridField.HasRowHeaders)
                        {
                            <td>&nbsp;</td>
                        }
                        @foreach (int i in Enumerable.Range(0, checkboxGridField.ColumnHeaders.Count))
                        {
                            <td><MudTextField Immediate="true" @bind-Value="checkboxGridField.ColumnHeaders[i]" Label="Edit column name" Variant="Variant.Outlined" /></td>
                        }
                    </tr>
                }
                @foreach (int i in Enumerable.Range(0, checkboxGridField.Rows))
                {
                    <tr>
                        @if (checkboxGridField.HasRowHeaders)
                        {
                            <td><MudTextField Immediate="true" @bind-Value="checkboxGridField.RowHeaders[i]" Label="Edit row name" Variant="Variant.Outlined" /></td>

                        }
                        @foreach (int j in Enumerable.Range(0, checkboxGridField.Columns))
                        {
                            <td>
                                <input type="checkbox" @bind="checkboxGridField.GridState[i][j]" />
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
    }
    else if (Field is DCCreatureColorField colorField)
    {
        <MudColorPicker Variant="Variant.Outlined" ColorPickerView="ColorPickerView.GridCompact" Label="Basic Color Picker" @bind-Text="colorField.Value" Style="@($"color: {colorField.Value};")" Placeholder="Select Color" />
    }
    else if (Field is DCCreatureDnDConditionsField dndConditionsField)
    {
        <MudStack Row="true" style="padding-top:5px;padding-bottom:5px;">
            <p>This field cannot be edited</p>
        </MudStack>
        <div class="d-flex flex-wrap gap-4">
            @foreach (int i in Enumerable.Range(0, dndConditionsField.Labels.Count))
            {
                <MudStack Row="true" Style="padding:5px;background-color:#404040;border-radius:5px;">
                    <MudTextField Immediate="true" @bind-Value="dndConditionsField.Labels[i]" Label="Option label" Variant="Variant.Outlined" />
                    <MudCheckBox Label="@dndConditionsField.Labels[i]" @bind-Value="dndConditionsField.SelectedOptions[i]"></MudCheckBox>
                </MudStack>
            }
        </div>
    }
    else if (Field is DCCreatureStatsField statsField)
    {
        <MudNumericField @bind-Value="statsField.Count" Label="Stats count" Variant="Variant.Outlined" />
        <MudCheckBox Label="Keep values editable" @bind-Value="statsField.ValuesAreEditable"></MudCheckBox>
        <MudStack Row="true">
            @foreach (int i in Enumerable.Range(0, statsField.Count))
            {
                <MudStack Row="false">
                    <MudTextField Immediate="true" @bind-Value="statsField.StatsLabels[i]" Label="Stat label" Variant="Variant.Outlined" />
                    <MudNumericField @bind-Value="statsField.StatsValues[i]" Label="@statsField.StatsLabels[i]" Variant="Variant.Outlined" />
                </MudStack>
            }
        </MudStack>
    }
}
else
{
    // Normal rendering
    @if (Field is DCCreatureHitPointsField hitPointsField)
    {
        <MudStack Row="true" Style="display: flex;justify-content: center;align-items: center;">
            <MudNumericField @bind-Value="hitPointsField.CurrentHP" Variant="Variant.Outlined" Style="width:150px;" Adornment="Adornment.End" AdornmentText="@(" / " + hitPointsField.MaximumHP.ToString() + " HP")" Class="CreatureCustomFieldRendererFieldLabel CreatureCustomFieldRendererFieldBackground" />
        </MudStack>
    }
    else if (Field is DCCreatureNumericField numericField)
    {
        <MudNumericField @bind-Value="numericField.Value" Label="@Field.Title" Variant="Variant.Outlined" Class="CreatureCustomFieldRendererFieldLabel CreatureCustomFieldRendererFieldBackground" />
    }
    else if (Field is DCCreatureTextField textField)
    {
        <MudTextField AutoGrow spellcheck="false" @bind-Value="textField.Text" Label="@Field.Title" Variant="Variant.Outlined" style="min-width:300px;" Class="CreatureCustomFieldRendererFieldLabel CreatureCustomFieldRendererFieldBackground" />
    }
    else if (Field is DCCreatureTextGridField textGridField)
    {
        <MudStack Row="false">
            <MudItem>
                <b><h5 class="CreatureCustomFieldRendererFieldTitle">@textGridField.Title</h5></b>
            </MudItem>
            <MudItem>
                <div style="padding-bottom:10px;">
                    <table>
                        @if (textGridField.HasColumnHeaders)
                        {
                            <tr>
                                @if (textGridField.HasRowHeaders)
                                {
                                    <td>&nbsp;</td>
                                }
                                @foreach (int i in Enumerable.Range(0, textGridField.ColumnHeaders.Count))
                                {
                                    <td><span class="CreatureCustomFieldRendererCheckBoxGridLabels">@textGridField.ColumnHeaders[i]</span></td>
                                }
                            </tr>
                        }
                        @foreach (int i in Enumerable.Range(0, textGridField.Rows))
                        {
                            <tr>
                                @if (textGridField.HasRowHeaders)
                                {
                                    <td><span class="CreatureCustomFieldRendererCheckBoxGridLabels">@textGridField.RowHeaders[i]</span></td>
                                }
                                @foreach (int j in Enumerable.Range(0, textGridField.Columns))
                                {
                                    <td style="padding:3px;vertical-align:top;">
                                        @if (textGridField.HasTextLabels[i][j] == true)
                                        {
                                            <MudTextField AutoGrow Immediate="true" spellcheck="false" @bind-Value="textGridField.TextValues[i][j]" Label="@textGridField.TextLabels[i][j]" Variant="Variant.Outlined" Class="CreatureCustomFieldRendererFieldLabel CreatureCustomFieldRendererFieldBackground" />
                                        }
                                        else
                                        {
                                            <MudTextField AutoGrow Immediate="true" spellcheck="false" @bind-Value="textGridField.TextValues[i][j]" Variant="Variant.Outlined" Class="CreatureCustomFieldRendererFieldLabel CreatureCustomFieldRendererFieldBackground" />
                                        }
                                    </td>
                                }
                            </tr>
                        }
                    </table>
                </div>
            </MudItem>
        </MudStack>
    }
    else if (Field is DCCreatureCheckboxField checkBoxField)
    {
        <MudStack Row="true">
            @foreach (int i in Enumerable.Range(0, checkBoxField.Labels.Count))
            {
                <MudCheckBox Label="@checkBoxField.Labels[i]" @bind-Value="checkBoxField.SelectedOptions[i]"></MudCheckBox>
                @if (checkBoxField.ShowTextFields == true)
                {
                    <MudTextField AutoGrow spellcheck="false" @bind-Value="checkBoxField.TextFields[i]" Label="@checkBoxField.TextFieldsLabels[i]" Variant="Variant.Outlined" Class="CreatureCustomFieldRendererFieldLabel CreatureCustomFieldRendererFieldBackground" />
                }
            }
        </MudStack>
    }
    else if (Field is DCCreatureCheckboxGridField checkboxGridField)
    {
        <b><span class="CreatureCustomFieldRendererFieldTitle">@checkboxGridField.Title</span></b>
        <div style="padding:10px;">
            <table>
                @if (checkboxGridField.HasColumnHeaders)
                {
                    <tr>
                        @if (checkboxGridField.HasRowHeaders)
                        {
                            <td>&nbsp;</td>
                        }
                        @foreach (int i in Enumerable.Range(0, checkboxGridField.ColumnHeaders.Count))
                        {
                            <td><span class="CreatureCustomFieldRendererCheckBoxGridLabels">@checkboxGridField.ColumnHeaders[i]</span></td>
                        }
                    </tr>
                }
                @foreach (int i in Enumerable.Range(0, checkboxGridField.Rows))
                {
                    <tr>
                        @if (checkboxGridField.HasRowHeaders)
                        {
                            <td><span class="CreatureCustomFieldRendererCheckBoxGridLabels">@checkboxGridField.RowHeaders[i]</span></td>
                        }
                        @foreach (int j in Enumerable.Range(0, checkboxGridField.Columns))
                        {
                            <td style="padding:3px;">
                                <input type="checkbox" @bind="checkboxGridField.GridState[i][j]" />
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
    }
    else if (Field is DCCreatureColorField colorField)
    {
        <MudStack Row="true" Wrap="Wrap.Wrap">
            @if (_showColorPicker)
            {
                <div @onclick="() => {_showColorPicker = false; NotifyParentOnChange();}">
                    <MudColorPicker
                        PickerVariant="PickerVariant.Static"
                        ColorPickerView="ColorPickerView.GridCompact"
                        Variant="Variant.Outlined" Label="Basic Color Picker"
                        @bind-Text="colorField.Value"
                        Style="@($"color: {colorField.Value ?? ""};")" Placeholder="Select Color" />
                </div>                
                <span style="@($"cursor:pointer;background-color:{colorField.Value ?? ""};border-radius:5px;border-width:1px;border-color:grey;width:50px;height:50px;")" @onclick="() => {_showColorPicker = !_showColorPicker; NotifyParentOnChange();}">&nbsp;Close&nbsp;</span>
            } else
            {
                <span class="CreatureCustomFieldRendererFieldTitle">@colorField.Title</span>
                <span style="@($"cursor:pointer;background-color:{colorField.Value ?? ""};border-radius:5px;border-width:1px;border-color:grey;width:50px;height:50px;")" @onclick="() => {_showColorPicker = !_showColorPicker; NotifyParentOnChange();}">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
            }

            </MudStack>
    }
    else if (Field is DCCreatureDnDConditionsField dndConditionsField)
    {
        <MudStack Row="true" Wrap="Wrap.Wrap" Style="cursor:pointer;" @onclick="() => {_dndConditionsFieldMaximized = !_dndConditionsFieldMaximized; NotifyParentOnChange();}">
            @if (_dndConditionsFieldMaximized == false) {
                @if (dndConditionsField.SelectedOptions.Count(x => x == true) == 0) {
                    <MudItem><h5>Add condition&nbsp;<MudIcon Icon="@Icons.Material.Filled.KeyboardDoubleArrowRight" Color="Color.Success"></MudIcon></h5></MudItem>
                }
                @foreach (int i in Enumerable.Range(0, dndConditionsField.Labels.Count))
                {
                    @if (dndConditionsField.SelectedOptions[i] == true) {
                        <MudItem class="DnDConditionsFieldItem" style="background-color:#9A7A00;">@dndConditionsField.Labels[i]</MudItem>
                    }
                }
            } else {
                <MudItem style="padding:5px;border-radius:5px;border-color:grey;border-width:thin;"><h5>Minimize&nbsp;<MudIcon Icon="@Icons.Material.Filled.KeyboardDoubleArrowLeft" Color="Color.Success"></MudIcon></h5></MudItem>
                @foreach (int i in Enumerable.Range(0, dndConditionsField.Labels.Count))
                {
                    @if (dndConditionsField.SelectedOptions[i] == true)
                    {
                        <MudItem Style="margin:-10px;padding:-5px;transform: scale(0.9);">
                            <MudCheckBox style="color:#BAAA00;" Label="@dndConditionsField.Labels[i]" @bind-Value="dndConditionsField.SelectedOptions[i]"></MudCheckBox>
                        </MudItem>
                    } else {
                        <MudItem Style="margin:-10px;padding:-5px;transform: scale(0.9);">
                            <MudCheckBox Label="@dndConditionsField.Labels[i]" @bind-Value="dndConditionsField.SelectedOptions[i]"></MudCheckBox>
                        </MudItem>
                    }
                }
            }
        </MudStack>
    }
    else if (Field is DCCreatureStatsField statsField)
    {
        <MudStack Row="true">
            @foreach (int i in Enumerable.Range(0, statsField.Count))
            {
                <MudStack Row="false" Style="border-radius:5px;border-width:thin;background-color:darkcyan;">
                    @if (statsField.ValuesAreEditable)
                    {
                        <MudNumericField Style="width:75px;" @bind-Value="statsField.StatsValues[i]" Label="@statsField.StatsLabels[i]" Variant="Variant.Outlined" />
                    } else
                    {
                        <MudItem Style="text-align:center;font-weight:400;font-size:18px;">@statsField.StatsValues[i]</MudItem>
                        <MudItem Style="padding-left:5px;padding-right:5px;text-align:center;font-weight:200;font-size:14px;">@statsField.StatsLabels[i]</MudItem>
                    }
                </MudStack>
            }
        </MudStack>
    }
}

@code {
    [Parameter]
    public DCCreatureCustomField Field { get; set; } = default!;
    [Parameter]
    public bool EditionMode { get; set; } = false;
    [Parameter]
    public EventCallback OnChange { get; set; }

    private bool _showColorPicker = false;

    private bool _dndConditionsFieldMaximized = false;

    private void NotifyParentOnChange()
    {
        if (OnChange.HasDelegate)
        {
            OnChange.InvokeAsync();
        }
    }

}
