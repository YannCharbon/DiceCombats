@inject DiceCombatsService CombatService
@inject NavigationManager Navigation

<style>
    .CombatEditorFloatingInitiativeWindow {
        position: fixed; /* Fixes the element relative to the viewport */
        bottom: 50px; /* Adjust the distance from the top */
        right: 10px; /* Adjust the distance from the right edge */
        width: 350px; /* Set a fixed width */
        background-color: #fff; /* Background color */
        border: 1px solid #ccc; /* Border for visibility */
        border-radius:10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); /* Optional shadow */
        padding: 10px; /* Padding inside the floating window */
        z-index: 1000; /* Ensures it stays above other content */
        max-height: 250px;
        overflow-y: scroll;
        overflow-x: hidden;
    }
</style>

@if (!EditionMode)
{
    <div class="CombatEditorFloatingInitiativeWindow">
        <MudGrid Style="padding:10px;">
            <MudItem sm="10"><h3>Initiative</h3></MudItem>
            @if (_initiativeWindowsMaximized)
            {
                <MudItem sm="2"><MudIcon @onclick="() => _initiativeWindowsMaximized = false" Icon="@Icons.Material.Filled.ArrowCircleUp" Title="Reduce"></MudIcon></MudItem>
            }
            else
            {
                <MudItem sm="2"><MudIcon @onclick="() => _initiativeWindowsMaximized = true" Icon="@Icons.Material.Filled.ArrowCircleDown" Title="Maximize"></MudIcon></MudItem>
            }
        </MudGrid>

        @if (_initiativeWindowsMaximized)
        {
            <table>
                <tr style="border-bottom:solid; border-bottom-width:1px;">
                    <th>Creature</th>
                    <th>Roll</th>
                    <th>Order</th>
                    <th>Quick link</th>
                </tr>
                @foreach (DCCreature creature in _combat.CreaturesList)
                {
                    <tr style="border-bottom:solid; border-bottom-width:1px;">
                        <td style="padding:5px;">@creature.Name</td>
                        <td style="width:60px;padding:5px;"><MudNumericField T="int"></MudNumericField></td>
                        <td style="width:60px;padding:5px;"><MudNumericField T="int"></MudNumericField></td>
                        <td style="width:100px;padding:5px;">
                            <a style="cursor:pointer;border-radius:30px;padding:5px;background-color:aliceblue;" onclick="@($"scrollToElementById('{creature.Id.ToString()}')")">Quick jump</a>
                        </td>
                    </tr>
                }
            </table>
        }
    </div>
}

<MudStack Row="true" Style="padding-bottom:20px;">
    @if (EditionMode)
    {
        <MudTextField Label="Combat name" Variant="Variant.Outlined" T="string" @bind-Value="_combat.Name"></MudTextField>
        <MudButton OnClick="SaveCombat" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Primary" Size="Size.Large">Save</MudButton>
        <MudButton OnClick="() => EditionMode = false" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" IconColor="Color.Secondary" Size="Size.Large">Exit edition mode</MudButton>
    } else
    {
        <MudGrid>
            <MudItem sm="6" Style="padding:10px;">
                <h1>@_combat.Name</h1>
                <MudButton OnClick="() => EditionMode = true" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" IconColor="Color.Primary" Size="Size.Large">Edit</MudButton>
            </MudItem>
            <MudItem sm="6" Style="padding:10px;">

            </MudItem>
        </MudGrid>        
    }
</MudStack>

@if (EditionMode)
{
    <div style="white-space: nowrap; width: 100%;">
        <div style="display: inline-block; vertical-align: top; white-space: normal; width: 50%; padding:10px; margin:10px; border:solid; border-width:1px; border-radius:10px;">
            <h2>Add/Remove creatures</h2>
            <div style="padding-bottom:10px;">
                <MudTextField Immediate="true" T="string" ValueChanged="@UpdateCreatureSearchList" Label="Search creature" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" />
            </div>
            <div style="height:200px;overflow-y:scroll;overflow-x:hidden;">            
                @foreach (DCCreature creature in creatureSearchList)
                    {
                    <div class="row">
                        <div class="col col-xs-4">
                            <span>@creature.Name</span>
                        </div>
                    
                            @if (_combat.CreaturesList.Find(x => x.Name == creature.Name) == null)
                            {
                                <div class="col col-xs-2">
                                    <MudButton OnClick="() => AddCreature(creature)" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Primary" Size="Size.Large">Add</MudButton>
                                </div>
                            } else
                            {
                                <div class="col col-xs-3">
                                    <MudButton OnClick="() => RemoveCreature(creature)" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Remove" IconColor="Color.Secondary" Size="Size.Large">Remove</MudButton>
                                </div>
                                <div class="col col-xs-4">
                                    <span>Creature already added <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" /></span>
                                </div>                            
                            }
                    
                    </div>
                    <MudDivider />
                }
            
            </div>
        </div>
        <div style="display: inline-block; vertical-align: top; white-space: normal; width: 40%; padding:10px; margin:10px; border:solid; border-width:1px; border-radius:10px;">
            @foreach (DCCreature creature in _combat.CreaturesList)
            {
                <div class="row">
                    <div class="col col-xs-4">
                        <span>@creature.Name</span>
                    </div>
                    <div class="col col-xs-4">
                    <MudNumericField T="uint" Min="1" Value="creature.InCombatInstanceCount" ValueChanged="(args) => _combat.UpdateInstanceCount(args, creature)" Label="Instances count" Variant="Variant.Outlined"></MudNumericField>
                    </div>
                </div>
            }
        </div>
    </div>
} else
{
    <MudGrid>
        @foreach(DCCreature creature in _combat.CreaturesList)
        {
            <MudItem sm="6" Style="padding:10px;">
                <div style="background-color:#F0F0F0;padding:5px;border-radius:10px;">
                    <div style="padding:10px" id="@creature.Id.ToString()">
                        @if (creature.ImageSheetBas64 != string.Empty)
                        {
                            <h1>@creature.Name</h1>
                            <img src="@creature.ImageSheetBas64" height="500px" />
                        }
                        else if (creature.HtmlSheet != string.Empty)
                        {
                            @((MarkupString)creature.HtmlSheet)
                        }
                        else if (creature.IsPlayer)
                        {
                            <h1>@creature.Name</h1>
                        }
                        else
                        {
                            <p>Could not render creature sheet</p>
                        }
                    </div>
                    <div style="padding:10px;">
                        @foreach (List<DCCreatureCustomField> instanceCustomFields in _combat.GetCreatureInstancesCustomFields(creature))
                        {
                            <div style="@($"background-color:{ instanceCustomFields.Find(x => x is DCCreatureColorField)?.GetValue() ?? "#F9F9F9"};padding:10px;border-radius:10px;margin:10px;")">
                                <div class="d-flex flex-wrap gap-4">
                                    @foreach(DCCreatureCustomField field in instanceCustomFields)
                                    {
                                        <div style="width:max-content;">
                                            <MudPaper Class="d-flex align-center justify-center" Style="padding:5px;">
                                                <CreatureCustomFieldRenderer Field="field" EditionMode="false" OnChange="OnCustomFieldChanged" />
                                            </MudPaper>
                                        </div>
                                    }                        
                                </div>                    
                            </div>
                        }            
                    </div>
                </div>
            </MudItem>
        }
    </MudGrid>
    <div style="height:250px">
        <!--Some margin-->
    </div>
}

@code {
    [Parameter]
    public string CombatGuid { get; set; } = default!;
    [Parameter]
    public bool EditionMode { get; set; } = false;

    private DCCombat _combat = new DCCombat("New combat");

    private List<DCCreature> creatureSearchList = new List<DCCreature>();

    private bool _initiativeWindowsMaximized = true;

    protected override void OnInitialized()
    {
        creatureSearchList = CombatService.GetCreatureList();

        Debug.WriteLine(CombatGuid);
        if (CombatGuid != "new")
        {
            var combat = CombatService.GetCombatList().Find(x => x.Id.ToString() == CombatGuid);
            if (combat != null)
            {
                _combat = combat;
            } else
            {
                _combat = new DCCombat("New combat");
            }       
        } else
        {
            EditionMode = true;
        }

        base.OnInitialized();
    }

    private void SaveCombat()
    {
        var combats = CombatService.GetCombatList();
        var combat = combats.Find(x => x.Id == _combat.Id);
        if (combat != null)
        {
            CombatService.DeleteCombat(combat);
        }

        CombatService.AddCombat(_combat);

        CombatService.SaveCombats();

        Navigation.NavigateTo("/combats");
    }

    private void AddCreature(DCCreature creature)
    {
        if (!_combat.CreaturesList.Contains(creature))
        {
            _combat.AddCreature(creature);
        }        
    }

    private void RemoveCreature(DCCreature creature)
    {
        _combat.RemoveCreature(creature);
    }

    private void UpdateCreatureSearchList(string arg)
    {
        var tmp = CombatService.GetCreatureList().FindAll(x => x.Name.Contains(arg));
        creatureSearchList = tmp;
    }

    private void OnCustomFieldChanged()
    {
        StateHasChanged();
    }

}
