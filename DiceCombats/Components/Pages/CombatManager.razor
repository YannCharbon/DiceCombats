@page "/combatmanager/{CombatGuid}"

@inject DiceCombatsService CombatService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<style>
    .CombatEditorFloatingInitiativeWindow {
        position: fixed;
        bottom: 50px;
        right: 10px;
        width: 450px;
        background-color: #303030;
        border: 1px solid #505050;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(255, 255, 255, 0.1);
        padding: 10px;
        z-index: 1000;
        max-height: 450px;
        overflow-y: scroll;
        overflow-x: hidden;
        zoom: 0.85;
    }

    @@media screen and (max-width: 768px) {
        .CombatEditorFloatingInitiativeWindow {
            width: calc(100% - 1rem);
            max-height: 350px;
        }
    }

    .CombatEditorCreatureLayout {
        background-color: #303030;
        box-shadow: 0 2px 10px rgba(255, 255, 255, 0.1);
        border: 1px solid #505050;
        padding: 5px;
        border-radius: 10px;
    }

    .CombatEditorCustomFieldsLayout {
        box-shadow: 0 2px 10px rgba(255, 255, 255, 0.1);
        border: 1px solid #505050;
        padding: 5px;
        border-radius: 10px;
    }


    .masonry-layout {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem; /* Space between items */
        zoom:0.85;
    }

    .masonry-item {
        display: block;
        width: calc(50% - 1rem); /* Adjust width for 3 items per row */
        margin-bottom: 1rem;
    }

    @@media screen and (max-width: 768px) {
        .masonry-item {
            width: calc(100% - 1rem); /* Adjust for smaller screens */
        }
    }

    @@media screen and (max-width: 480px) {
        .masonry-item {
            width: 100%; /* Single column for narrow screens */
        }
    }

</style>

<script>
    window.initializeMasonry = (selector) => {
        const grid = document.querySelector(selector);
        if (grid) {
            new Masonry(grid, {
                itemSelector: '.masonry-item',
                columnWidth: '.masonry-item',
                percentPosition: true,
                gutter: 10
            });
        }
    };
</script>

<GenericModal TContent="CreaturesSelector" OnClose="HandleCreaturesSelectorModalClose" @ref="CreaturesSelectorModalRef">
    <CreaturesSelector Combat="_combat" />
</GenericModal>

<div class="CombatEditorFloatingInitiativeWindow">
    <MudGrid Style="padding:10px;">
        <MudItem><h3>Initiative</h3></MudItem>
        @if (_initiativeWindowsMaximized)
        {
            <MudItem><MudIcon @onclick="SortCreaturesInitiativeRankByRoll" Icon="@Icons.Material.Filled.Sort" Title="Sort" Style="cursor:pointer;background-color:darkcyan;border-radius:5px;" Size="@Size.Large"></MudIcon></MudItem>
            <MudItem><MudIcon @onclick="CreaturesInitiativeReset" Icon="@Icons.Material.Filled.Sync" Title="Reset" Style="cursor:pointer;background-color:darkcyan;border-radius:5px;" Size="@Size.Large"></MudIcon></MudItem>
            <MudItem sm="2"><MudIcon @onclick="() => _initiativeWindowsMaximized = false" Icon="@Icons.Material.Filled.ArrowCircleDown" Title="Reduce" Style="cursor:pointer;" Size="@Size.Large"></MudIcon></MudItem>
        }
        else
        {
            <MudItem sm="2"><MudIcon @onclick="() => _initiativeWindowsMaximized = true" Icon="@Icons.Material.Filled.ArrowCircleUp" Title="Maximize" Style="cursor:pointer;" Size="@Size.Large"></MudIcon></MudItem>
        }
    </MudGrid>

    @if (_initiativeWindowsMaximized)
    {
        <table>
            <tr style="border-bottom:solid; border-bottom-width:1px;">
                <th>Creature</th>
                <th>Roll</th>
                <th>Order</th>
                <th>Quick link</th>
            </tr>
            @foreach (DCCreature creature in _initiativeWindowCreatureListCopy)
            {
                <tr style="border-bottom:solid; border-bottom-width:1px;">
                    <td style="width:240px;padding:5px;">@creature.Name</td>
                    <td style="width:60px;padding:5px;"><MudNumericField T="int" Style="color:#A0A0A0;" @bind-Value="creature.InitiativeRoll"></MudNumericField></td>
                    <td style="width:60px;padding:5px;"><MudNumericField T="int" Style="color:white;font-weight:bold;font-size:16pt" @bind-Value="creature.InitiativeRank"></MudNumericField></td>
                    <td style="width:120px;padding:5px;">
                        <a style="cursor:pointer;border-radius:30px;padding:5px;background-color:darkcyan;" onclick="@($"scrollToElementById('{creature.Id.ToString()}')")">Quick jump</a>
                    </td>
                </tr>
            }
        </table>
    }
</div>

<MudStack Row="true" Style="padding-bottom:20px;" Wrap="Wrap.Wrap">
    <MudStack Row="true">
        <h1>@_combat.Name</h1>
        <MudButton OnClick="() => CreaturesSelectorModalRef?.Show()" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" IconColor="Color.Primary" Size="Size.Large">Edit</MudButton>
    </MudStack>
</MudStack>

<div id="masonry-layout" class="masonry-layout">
    @foreach (DCCreature creature in _combat.CreaturesList)
    {
        <div class="masonry-item">
            <div class="CombatEditorCreatureLayout">
                <div style="padding:10px" id="@creature.Id.ToString()">
                    @if (creature.ImageSheetBas64 != string.Empty)
                    {
                        <h1>@creature.Name</h1>
                        <img src="@creature.ImageSheetBas64" height="500px" />
                    }
                    else if (creature.HtmlSheet != string.Empty)
                    {
                        <div style="color:black">
                            @((MarkupString)creature.HtmlSheet)
                        </div>
                    }
                    else if (creature.IsPlayer)
                    {
                        <h1>@creature.Name</h1>
                    }
                    else if (creature.IsManual)
                    {
                        <h1>@creature.Name</h1>
                    }
                    else
                    {
                        <p>Could not render creature sheet</p>
                    }
                </div>
                <div style="padding:10px;">
                    @foreach (List<DCCreatureCustomField> instanceCustomFields in _combat.GetCreatureInstancesCustomFields(creature))
                    {
                        <div class="CombatEditorCustomFieldsLayout" style="@($"border-color:{ instanceCustomFields.Find(x => x is DCCreatureColorField)?.GetValue() ?? "#F9F9F9"};padding:10px;border-radius:10px;border-width:2px;margin:10px;box-shadow: 0 2px 10px { instanceCustomFields.Find(x => x is DCCreatureColorField)?.GetValue() ?? "#FFFFFF"};")">
                            <div class="d-flex flex-wrap gap-2" style="align-items:center;">
                                @foreach (DCCreatureCustomField field in instanceCustomFields)
                                {
                                    <div>
                                        <MudPaper Class="d-flex align-center justify-center" Style="padding:5px;">
                                            <CreatureCustomFieldRenderer Field="field" EditionMode="false" OnChange="OnCustomFieldChanged" />
                                        </MudPaper>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>
<div style="height:450px">
    <!--Some margin-->
</div>


@code {
    [Parameter]
    public string CombatGuid { get; set; } = "new";

    private DCCombat _combat = new DCCombat("New combat");

    private List<DCCreature> _initiativeWindowCreatureListCopy = new List<DCCreature>();

    private GenericModal<CreaturesSelector>? CreaturesSelectorModalRef;

    private bool _initiativeWindowsMaximized = true;

    protected override void OnInitialized()
    {
        Debug.WriteLine(CombatGuid);
        if (CombatGuid != "new")
        {
            var combat = CombatService.GetCombatList().Find(x => x.Id.ToString() == CombatGuid);
            if (combat != null)
            {
                _combat = combat;
            }
            else
            {
                _combat = new DCCombat("New combat");
            }
        }

        _initiativeWindowCreatureListCopy = _combat.CreaturesList.ToList();

        SortCreaturesInitiativeRankByRoll();

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("initializeMasonry", "#masonry-layout");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender && _combat.CreaturesList.Count == 0)
        {
            // New combat so we directly go to edition mode
            CreaturesSelectorModalRef?.Show();
        }
    }

    private void OnCustomFieldChanged()
    {
        StateHasChanged();
    }

    private void SortCreaturesInitiativeRankByRoll()
    {
        _initiativeWindowCreatureListCopy = _initiativeWindowCreatureListCopy.OrderByDescending(x => x.InitiativeRoll).ToList();

        if (_initiativeWindowCreatureListCopy.Count <= 0)
        {
            return;
        }

        int lastRoll = _initiativeWindowCreatureListCopy[0].InitiativeRoll;
        int currentRank = 1;

        for (int i = 0; i < _initiativeWindowCreatureListCopy.Count(); i++)
        {
            if (_initiativeWindowCreatureListCopy[i].InitiativeRoll < lastRoll)
            {
                currentRank++;
            }
            _initiativeWindowCreatureListCopy[i].InitiativeRank = currentRank;
            lastRoll = _initiativeWindowCreatureListCopy[i].InitiativeRoll;
        }
    }

    private void CreaturesInitiativeReset()
    {
        foreach (DCCreature creature in _initiativeWindowCreatureListCopy)
        {
            creature.InitiativeRoll = 0;
            creature.InitiativeRank = 0;
        }
    }

    private void OpenCreaturesSelectorModal()
    {
        CreaturesSelectorModalRef?.Show();
    }

    private void HandleCreaturesSelectorModalClose(bool result)
    {
        _initiativeWindowCreatureListCopy = _combat.CreaturesList.ToList();

        SaveCombat();
    }

    private void SaveCombat()
    {
        var combats = CombatService.GetCombatList();
        var combat = combats.Find(x => x.Id == _combat.Id);
        if (combat != null)
        {
            CombatService.DeleteCombat(combat);
        }

        CombatService.AddCombat(_combat);

        CombatService.SaveCombats();
    }

}
