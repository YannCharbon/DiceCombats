name: Build and Release DiceCombats

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    name: Build and Release
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Install .NET MAUI Workloads
      run: dotnet workload install maui-android maui-windows maui-ios maui-maccatalyst

    - name: Determine AssemblyVersion
      id: version
      shell: bash
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          TAG_VERSION="${GITHUB_REF##*/}"
          echo "Tag version detected: $TAG_VERSION"
          ASSEMBLY_VERSION="${TAG_VERSION#v}.0"
          echo "assembly_version=$ASSEMBLY_VERSION" >> $GITHUB_ENV
          TAG_VERSION="${TAG_VERSION#v}"
          echo "tag_version=$TAG_VERSION" >> $GITHUB_ENV
        else
          echo "Manual trigger detected. Setting AssemblyVersion to 999.999.999.0"
          echo "assembly_version=999.999.999.0" >> $GITHUB_ENV
          echo "tag_version=dev" >> $GITHUB_ENV
        fi

    - name: Update AssemblyVersion in .csproj
      run: |
        sed -i "s|<AssemblyVersion>.*</AssemblyVersion>|<AssemblyVersion>${{ env.assembly_version }}</AssemblyVersion>|g" DiceCombats/DiceCombats.csproj
        git config user.name "github-actions"
        git config user.email "actions@github.com"
        git commit -a -m "Set AssemblyVersion to ${{ env.assembly_version }}"

    - name: Copy RELEASE_NOTES.md to wwwroot
      run: cp -Force RELEASE_NOTES.md DiceCombats/wwwroot/

    - name: Build for Windows
      run: |
        dotnet publish DiceCombats.sln -f net8.0-windows10.0.19041.0 -c Release `
          -p:RuntimeIdentifierOverride=win10-x64 `
          -p:WindowsPackageType=None `
          -p:IncludeAllContentForSelfExtract=true `
          -p:PublishReadyToRun=true `
          -p:IncludeNativeLibrariesForSelfExtract=true `
          -o ./publish/windows
      shell: pwsh

    - name: Decode and Save Certificate PFX
      shell: pwsh
      run: |
        $certBase64 = "${{ secrets.WIN_CERTIFICATE_B64 }}"
        $certBytes = [System.Convert]::FromBase64String($certBase64)
        $certPath = "$env:USERPROFILE\\mycert.pfx"
        [System.IO.File]::WriteAllBytes($certPath, $certBytes)
        echo "pfx_path=$certPath" >> $env:GITHUB_ENV

    - name: Add signtool to PATH
      uses: KamaranL/add-signtool-action@v1

    - name: Sign Windows Executables
      shell: pwsh
      run: |
        $exeFiles = Get-ChildItem -Path ./publish/windows -Filter *.exe -Recurse
        foreach ($exe in $exeFiles) {
          signtool sign `
            /f "${{ env.pfx_path }}" `
            /p "${{ secrets.WIN_CERTIFICATE_PASSWORD }}" `
            /fd SHA256 `
            /tr http://timestamp.digicert.com `
            /td SHA256 `
            "$($exe.FullName)"
        }

    - name: Create release directory
      run: mkdir -p ./publish/release

    - name: Create Zip of Windows Builds
      shell: pwsh
      run: |
        $zipPath = "./publish/release/DiceCombats-${{ env.tag_version }}-Windows.zip"
        Compress-Archive -Path ./publish/windows/* -DestinationPath $zipPath
        echo "zip_path=$zipPath" >> $env:GITHUB_ENV

    - name: Build for Android
      run: |
        dotnet publish DiceCombats/DiceCombats.csproj -f net8.0-android -c Release -o ./publish/android

    - name: Find APK File
      id: find_apk
      shell: bash
      run: |
        APK_FILE=$(find ./publish/android -name "*.apk" | head -n 1)
        echo "Found APK File: $APK_FILE"
        echo "apk_file=$APK_FILE" >> $GITHUB_ENV

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: DiceCombats-Builds
        path: ./publish/release

    - name: Read Release Notes
      id: notes
      shell: pwsh
      run: |
        $releaseNotes = Get-Content RELEASE_NOTES.md -Raw
        echo "release_notes<<EOF" >> $env:GITHUB_ENV
        echo "$releaseNotes" >> $env:GITHUB_ENV
        echo "EOF" >> $env:GITHUB_ENV

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: v${{ env.tag_version }}
        name: DiceCombats ${{ env.tag_version }}
        body: ${{ env.release_notes }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: |
          ${{ env.zip_path }}
          ${{ env.apk_file }}
