@*
 * DiceCombats - Copyright (C) 2025 Yann Charbon
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 * This file is part of DiceCombats, released under the GNU GPL v3.
 * See the LICENSE file in the repository root for details.
*@

@using DiceCombats
@using System.Collections.Generic
@using Microsoft.AspNetCore.Components
@inject DiceCombatsService CombatService
@inject IStringLocalizer<Resources.Localization.CreatureCustomFieldsEditor> Loc

@inject IJSRuntime JS

<style>
    .CreatureCustomFieldsEditorCustomField{
        padding:10px;
        margin:15px;
        background-color:#505050;
        border-radius:10px;
        max-width:100%;
    }
</style>

<div>
    @if (EditionMode)
    {
        <h3>@Loc["AddAdditionalFieldsTitle"]</h3>
    }

    <div class="d-flex flex-wrap" style="align-items:center;">
        @foreach (var field in Fields)
        {
            <div class="CreatureCustomFieldsEditorCustomField">
                <div>
                    <CreatureCustomFieldRenderer Field="field" EditionMode="EditionMode" />
                </div>
                @if (EditionMode)
                {
                    <div style="display:flex; justify-content:right; padding:5px;">
                        <MudIconButton title="@Loc["MoveBackward"]" Icon="@Icons.Material.Filled.ArrowCircleLeft" @onclick="() => MoveField(field, true)" />
                        <MudIconButton title="@Loc["MoveForward"]" Icon="@Icons.Material.Filled.ArrowCircleRight" @onclick="() => MoveField(field, false)" />
                        <MudButton style="padding-top:10px;" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="() => RemoveField(field)">@Loc["FieldRemove"]</MudButton>
                    </div>
                }
            </div>
        }

        @if (EditionMode)
        {
            <div style="padding:10px;">
                <MudStack Row="true">
                    <MudItem>
                        <MudSelect Style="min-width: 200px;" T="string" Label="@Loc["FieldType"]" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="newFieldType">
                            <MudSelectItem T="string" Value="@("HitPoints")" />
                            <MudSelectItem T="string" Value="@("Numeric")" />
                            <MudSelectItem T="string" Value="@("Checkbox")" />
                            <MudSelectItem T="string" Value="@("CheckboxGrid")" />
                            <MudSelectItem T="string" Value="@("TextGrid")" />
                            <MudSelectItem T="string" Value="@("Text")" />
                            <MudSelectItem T="string" Value="@("Color")" />
                            <MudSelectItem T="string" Value="@("DnD conditions")"></MudSelectItem>
                            <MudSelectItem T="string" Value="@("Stats")"></MudSelectItem>
                            @foreach (DCCreatureCustomField customField in CombatService.GetUserCreatureCustomFields())
                            {
                                <MudSelectItem T="string" Value="@(customField.Title)"><MudIcon Icon="@Icons.Material.Filled.PersonAddAlt1"></MudIcon> @(customField.Title)</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem>
                        <div style="padding-top:5px">
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="AddField">@Loc["AddField"]</MudButton>
                        </div>
                    </MudItem>
                </MudStack>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public List<DCCreatureCustomField> Fields { get; set; } = new List<DCCreatureCustomField>();
    [Parameter]
    public bool EditionMode { get; set; } = true;

    private string newFieldType = "HitPoints";

    private void AddField()
    {
        DCCreatureCustomField? newField = null;
        switch (newFieldType)
        {
            case "HitPoints":
                newField = new DCCreatureHitPointsField { Title = "Hit points" };
                break;
            case "Numeric":
                newField = new DCCreatureNumericField { Title = "Numeric Field" };
                break;
            case "Checkbox":
                newField = new DCCreatureCheckboxField { Title = "Checkbox Field" };
                break;
            case "CheckboxGrid":
                newField = new DCCreatureCheckboxGridField { Title = "Checkbox Grid Field" };
                break;
            case "Text":
                newField = new DCCreatureTextField { Title = "Text Field" };
                break;
            case "TextGrid":
                newField = new DCCreatureTextGridField { Title = "Text Grid Field" };
                break;
            case "Color":
                newField = new DCCreatureColorField { Title = "Color Field" };
                break;
            case "DnD conditions":
                newField = new DCCreatureDnDConditionsField { Title = "Conditions" };
                break;
            case "Stats":
                newField = new DCCreatureStatsField { Title = "Stats" };
                break;
            default:
                newField = CombatService.GetUserCreatureCustomFieldByName(newFieldType)?.Clone();
                break;
        }
        if (newField != null) {
            Fields.Add(newField);
        }
    }

    private void RemoveField(DCCreatureCustomField field)
    {
        Fields.Remove(field);
    }

    private void MoveField(DCCreatureCustomField field, bool upNotDown)
    {
        int idx = Fields.IndexOf(field);
        if (idx <= 0 && upNotDown || idx + 1 >= Fields.Count && !upNotDown)
        {
            return;
        }

        Fields.RemoveAt(idx);
        if (upNotDown)
        {
            Fields.Insert(idx - 1, field);
        } else
        {
            Fields.Insert(idx + 1, field);
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            JS.InvokeVoidAsync("scrollToBottom");
        }
        return base.OnAfterRenderAsync(firstRender);
    }
}
