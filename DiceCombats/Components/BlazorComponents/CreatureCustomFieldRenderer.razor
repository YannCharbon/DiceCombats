@using DiceCombats

<div>
    @if (EditionMode)
    {
        <MudTextField Immediate="true" @bind-Value="Field.Title" Label="Edit field name" Variant="Variant.Outlined" />
    }

    @if (Field is DCCreatureNumericField numericField)
    {
        <MudNumericField @bind-Value="numericField.Value" Label="@Field.Title" Variant="Variant.Outlined" />
    }
    else if (Field is DCCreatureTextField textField)
    {
        <MudTextField @bind-Value="textField.Text" Label="@Field.Title" Variant="Variant.Outlined" />
    }
    else if (Field is DCCreatureCheckboxGridField checkboxGridField)
    {
        @if (EditionMode)
        {
            <div class="row">
                <div class="col col-md-2">
                    <MudNumericField @bind-Value="checkboxGridField.Columns" Label="Row checkbox count" Variant="Variant.Outlined" Min="1" />
                </div>
                <div class="col col-md-2">
                    <MudNumericField @bind-Value="checkboxGridField.Rows" Label="Column checkbox count" Variant="Variant.Outlined" Min="1" />
                </div>
                <div class="col col-md-2">
                    <MudCheckBox T="bool" @bind-Value="checkboxGridField.HasRowHeaders" Label="Row labels"></MudCheckBox>
                </div>
                <div class="col col-md-2">
                    <MudCheckBox T="bool" @bind-Value="checkboxGridField.HasColumnHeaders" Label="Column labels"></MudCheckBox>
                </div>
            </div>
        }
        @try
        {
        <div style="padding:10px;">
            <table>
                @if (checkboxGridField.HasColumnHeaders)
                {
                    <tr>
                    @if (checkboxGridField.HasRowHeaders)
                    {
                        <td>&nbsp;</td>
                    }
                        @for (int i = 0; i < checkboxGridField.ColumnHeaders.Count; i++)
                        {
                            <td><MudTextField Immediate="true" @bind-Value="checkboxGridField.ColumnHeaders[i]" Label="Edit field name" Variant="Variant.Outlined" /></td>
                        }
                    </tr>
                }
                @for (int i = 0; i < checkboxGridField.Rows; i++)
                {
                    <tr>
                        @if (checkboxGridField.HasRowHeaders)
                        {
                            <td><MudTextField Immediate="true" @bind-Value="checkboxGridField.RowHeaders[i]" Label="Edit row name" Variant="Variant.Outlined" /></td>
                        }
                        @for (int j = 0; j < checkboxGridField.Columns; j++)
                        {
                            <td style="padding:5px;">
                                <input type="checkbox" checked="@checkboxGridField.GetCheckboxState(i, j)" @onchange="(e) => OnCheckboxChanged(i, j, e)" />
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
</div>

@code {
    [Parameter]
    public DCCreatureCustomField Field { get; set; } = default!;
    [Parameter]
    public bool EditionMode { get; set; } = false;

    private void OnCheckboxChanged(int row, int column, ChangeEventArgs e)
    {
        if (Field is DCCreatureCheckboxGridField checkboxGridField)
        {
            bool isChecked = (bool)e.Value;
            checkboxGridField.SetCheckboxState(row, column, isChecked);
        }
    }
}
